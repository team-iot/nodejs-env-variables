{"version":3,"sources":["./src/$_gendir lazy","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/service/configuration.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_gendir lazy\n// module id = ./src/$$_gendir lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  {{title}}\\n</div>\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { ConfigurationService } from './service/configuration.service';\nimport { Configuration } from './model/configuration.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  private configuration: Configuration;\n\n  title: string;\n\n  constructor(private configurationService: ConfigurationService) {\n    this.configuration = this.configurationService.getConfiguration();\n    this.title = this.configuration.url;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { ConfigurationService } from './service/configuration.service';\nimport { AppComponent } from './app.component';\n\nexport function configurationServiceFactory(configurationService: ConfigurationService): Function {  \n  return () => configurationService.load();\n}\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [\n    ConfigurationService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: configurationServiceFactory,\n      deps: [ConfigurationService],\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Http, RequestOptions, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\nimport { Observable } from \"rxjs/Observable\";\nimport { Configuration } from '../model/configuration.model';\n\n// Service zum Auslesen von Konfigurationseinstellungen\n@Injectable()\nexport class ConfigurationService {\n  // Konfigurationsobjekt der Anwendung\n  private configuration: Configuration;\n\n  // Subscription f체r das Auslesen der Konfiguration\n  private configSubscription: any;\n\n  // Erstellt ein neues Objekt vom Typ ConfigurationService\n  constructor(private http: HttpClient) {\n  }\n\n  // L채dt die Konfiguration aus der entsprechenden Ressource,\n  // wobei der Express-Server anhand einer serverseitigen\n  // Umgebungsvariablen entscheidet, den Inhalt welcher\n  // konkreten Datei er zur체ckgibt\n  load(): Promise<Configuration> {\n    this.configuration = null;\n\n    return this.http\n      .get('/config')\n      .toPromise()\n      .then((data: any) => {\n        console.info(data);\n        return this.configuration = data\n      })\n      .catch((err: any) => {\n        console.warn(err);\n        Promise.resolve();\n      });\n  }\n\n  // Gibt das Konfigurationsobjekt der Anwendung zur체ck\n  public getConfiguration(): Configuration {\n    return this.configuration;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/configuration.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}